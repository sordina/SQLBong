void usage() {
printf("\n);
printf("SQLBong\n);
printf("=======\n);
printf("\n);
printf("\n);
printf("Parse columnized output with SQL - Thanks to the power of <a href=\"http://www.sqlite.org/\">SQLite3</a>.\n);
printf("\n);
printf("The SQL syntax accepted is completely determined by what SQLite3 supports.\n);
printf("\n);
printf("Why the name? Because `SQLPipe` was taken.\n);
printf("\n);
printf("## Examples:\n);
printf("\n);
printf("    > ps | ./sqlbong \"select * from data\"\n);
printf("\n);
printf("  Acts like cat, but normalises the delimiters to one space - Passthrough.\n);
printf("\n);
printf("    > cat data.txt | ./sqlbong -f foo.db\n);
printf("\n);
printf("  Send columnized data from data.txt into an sqlite database foo.db\n);
printf("\n);
printf("    Server> nc -l 1234 | ./sqlbong -f out.db\n);
printf("\n);
printf("    Client> nc 127.0.0.1 1234\n);
printf("    hello world\n);
printf("    how   are\n);
printf("    you   ?\n);
printf("\n);
printf("    Server> sqlite3 out.db \".dump\"\n);
printf("    PRAGMA foreign_keys=OFF;\n);
printf("    BEGIN TRANSACTION;\n);
printf("    CREATE TABLE data (c1, c2);\n);
printf("    INSERT INTO \"data\" VALUES('hello','world');\n);
printf("    INSERT INTO \"data\" VALUES('how','are');\n);
printf("    INSERT INTO \"data\" VALUES('you','?');\n);
printf("    COMMIT;\n);
printf("\n);
printf("  Log output to a database on a remote server.\n);
printf("\n);
printf("    > cat test.txt | ./sqlbong \"select c2 from data limit 2\" \"select c1, c3, c2 from data where c2 > '4' order by c3 desc\"\n);
printf("\n);
printf("### test.txt:\n);
printf("\n);
printf("    1 2 3\n);
printf("    2 3 4\n);
printf("    3 4 5\n);
printf("    4 5 6\n);
printf("    5 6 7\n);
printf("    6 7 8\n);
printf("\n);
printf("### Output:\n);
printf("\n);
printf("    2\n);
printf("    3\n);
printf("    6 8 7\n);
printf("    5 7 6\n);
printf("    4 6 5\n);
printf("\n);
printf("Details:\n);
printf("--------\n);
printf("\n);
printf("* The table used is called 'data'\n);
printf("* There are as many columns in 'data' as the maximum number of columns in the input data\n);
printf("* The columns are labled (c1 .. c\<n\>)\n);
printf("* Data is stored as 'text' type (useful to remember for comparisons, numeric operations)\n);
printf("\n);
printf("Known Bugs\n);
printf("----------\n);
printf("\n);
printf("* Realloc requires too much memory in getwords.h\n);
printf("* Some dodgey argc mangling going on\n);
printf("\n);
printf("To Do\n);
printf("-----\n);
printf("\n);
printf("* Add support for command-line arguments\n);
printf("  - Specify delimiter (regex?)\n);
printf("  - Specify alignment for input data if columns are missing\n);
printf("  - Specify how to handle nulls for input, and output\n);
printf("  - Specify to use file database rather than memory (temporary or permanent)\n);
printf("  - Allow specifying the table name\n);
printf("  - Existing database files, or overwrite\n);
printf("\n);
printf("\n);
printf("\n);
}
